# .github/workflows/org‑coding‑hours.yml
name: Org Coding Hours

on:
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Optional start date (YYYY‑MM‑DD). Leave blank to use full history.'
        required: false
      repos:
        description: |
          One or more "owner/repo" pairs separated by commas.
          Omit to analyse the repository that triggered the workflow.
        required: false

# Prevent overlapping runs on the same ref (e.g. a user clicking twice)
concurrency:
  group: ${{ github.workflow }}‑${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # push metrics & site
  pages: write
  id-token: write

env:
  GO_VERSION: '1.24'        # single source of truth
  REPORTS_DIR: collected-reports
  SITE_DIR: site

jobs:
# ────────────────────────────────────────────────────────────────────────────────
# 1) Run git‑hours, collect the JSON and upload as an artifact
# ────────────────────────────────────────────────────────────────────────────────
  report:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4        # Node 20‑ready major tag
        with:
          fetch-depth: 0                 # git‑hours needs full history

      - uses: actions/setup-go@v5        # latest major; caching built‑in
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true                    # explicit for readability

      - name: Run Org Coding Hours Action
        id: hours
        uses: LabVIEW-Community-CI-CD/org-coding-hours-action@v6
        with:
          repos: ${{ github.event.inputs.repos || github.repository }}
          window_start: ${{ github.event.inputs.window_start }}

      - name: Collect JSON reports
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${REPORTS_DIR}"
          mapfile -t reports < <(find "$GITHUB_WORKSPACE" -type f -path '*/reports/*.json')
          if (( ${#reports[@]} == 0 )); then
            echo "::error ::No JSON reports found"
            exit 1
          fi
          cp "${reports[@]}" "${REPORTS_DIR}/"

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: git-hours-json
          path: ${{ env.REPORTS_DIR }}
          retention-days: 30
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────────────
# 2) Build the KPI microsite from the downloaded JSON
# ────────────────────────────────────────────────────────────────────────────────
  build-site:
    needs: report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download JSON artefacts
        uses: actions/download-artifact@v4
        with:
          name: git-hours-json
          path: tmp

      - name: Build KPI microsite
        shell: bash
        env:
          DATE: ${{ github.run_started_at }}
        run: |
          set -euo pipefail
          shopt -s nullglob

          FILE=$(find tmp -type f -name '*aggregated*.json' | head -n 1)
          if [[ -z "$FILE" ]]; then
            echo "::error ::Aggregated report not found"
            exit 1
          fi

          mkdir -p "$SITE_DIR/data"
          cp tmp/*.json "$SITE_DIR/data/"
          SNAPSHOT="git-hours-${DATE%%T*}.json"
          cp "$FILE" "$SITE_DIR/data/$SNAPSHOT"
          cp "$FILE" "$SITE_DIR/git-hours-latest.json"

          python <<'PY'
import os, json, glob, html, textwrap, datetime as dt, pathlib
site_dir = os.environ['SITE_DIR']
agg = json.load(open(f"{site_dir}/git-hours-latest.json"))
total = agg['total']

def rows(d):
    return "\n".join(
        f"<tr><td>{html.escape(k)}</td><td>{v['hours']}</td><td>{v['commits']}</td></tr>"
        for k, v in d.items() if k != 'total')

sections = []
for p in glob.glob(f"{site_dir}/data/*.json"):
    if 'aggregated' in p: continue
    repo_key = pathlib.Path(p).stem.replace('_','/')
    r = json.load(open(p))
    sections.append(
        f"<h2>{html.escape(repo_key)}</h2>"
        f"<table class='sortable'><thead><tr><th>Contributor</th>"
        f"<th>Hours</th><th>Commits</th></tr></thead><tbody>{rows(r)}</tbody></table>")

page = f"""
<!doctype html><html lang=en><head><meta charset=utf-8>
<meta name=viewport content='width=device-width,initial-scale=1'>
<title>Collaborator KPIs</title>
<link rel=stylesheet href='https://cdn.jsdelivr.net/npm/simpledotcss@2/simple.min.css'>
<script src='https://cdn.jsdelivr.net/npm/sortable-tablesort@1/sortable.min.js' defer></script>
<script src='https://cdn.jsdelivr.net/npm/chart.js@4'></script>
<style>canvas{{max-height:400px}}</style></head><body><main>
<h1>Collaborator KPIs</h1><p><em>Last updated {dt.datetime.utcnow():%Y-%m-%d %H:%M UTC}</em></p>
<h2>Totals (all repos)</h2>
<ul><li><strong>Hours</strong>: {total['hours']}</li>
<li><strong>Commits</strong>: {total['commits']}</li>
<li><strong>Contributors</strong>: {len(agg)-1}</li></ul>
<h2>Hours per contributor</h2><canvas id=hoursChart></canvas>
<h2>Commits per contributor</h2><canvas id=commitsChart></canvas>
<h2>Detail table (all repos)</h2>
<table class=sortable><thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
<tbody>{rows(agg)}</tbody></table>
{''.join(sections)}
<p>Historical JSON snapshots live in <code>/data</code>.</p>
<script>
fetch('git-hours-latest.json').then(r=>r.json()).then(d=>{
  const labels = Object.keys(d).filter(k=>k!=='total');
  const H = labels.map(l=>d[l].hours);
  const C = labels.map(l=>d[l].commits);
  new Chart(hoursChart,{type:'bar',data:{labels,datasets:[{label:'Hours',data:H}]},
    options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}});
  new Chart(commitsChart,{type:'bar',data:{labels,datasets:[{label:'Commits',data:C}]},
    options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}});
});
</script></main></body></html>
"""
pathlib.Path(f"{site_dir}/index.html").write_text(textwrap.dedent(page))
PY

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

# ────────────────────────────────────────────────────────────────────────────────
# 3) Publish to GitHub Pages
# ────────────────────────────────────────────────────────────────────────────────
  deploy-pages:
    needs: build-site
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
