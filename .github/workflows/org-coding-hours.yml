name: Org Coding Hours

on:
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Optional start date YYYY-MM-DD'
        required: false

permissions:
  contents: write        # needed for the action to push metrics & site
  pages: write
  id-token: write

jobs:
# -------------------------------------------------------------------
# 1) Run git‑hours, collect the JSON and upload as an artifact
# -------------------------------------------------------------------
  report:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run Org Coding Hours Action
      uses: LabVIEW-Community-CI-CD/org-coding-hours-action@v6
      with:
        repos: LabVIEW-Community-CI-CD/labview-icon-editor
        window_start: ${{ github.event.inputs.window_start }}

    # v6 drops JSON inside its own composite‑action folder.
    # This step finds them and stages them under collected‑reports/
    - name: Collect JSON reports
      run: |
        set -e
        mkdir collected-reports
        # find *any* JSON produced by git‑hours (covers future name tweaks)
        mapfile -t reports < <(find "$GITHUB_WORKSPACE" -type f -path '*/reports/*.json')
        if [ ${#reports[@]} -eq 0 ]; then
          echo "No JSON reports found" >&2
          exit 1
        fi
        cp "${reports[@]}" collected-reports/

    - name: Upload reports as artifact
      uses: actions/upload-artifact@v4
      with:
        name: git-hours-json                # <- keep this stable
        path: collected-reports             # always exists now
        retention-days: 30
        if-no-files-found: error            # fail fast if collection above broke

# -------------------------------------------------------------------
# 2) Build the KPI microsite from the downloaded JSON
# -------------------------------------------------------------------
  build-site:
    needs: report
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download JSON artefacts
      uses: actions/download-artifact@v4
      with:
        name: git-hours-json
        path: tmp

    # ---------------- generate the site ----------------------------
    - name: Build KPIs site
      run: |
        set -eo pipefail
        DATE=$(date +%F)

        # aggregated file (v6 uses 'aggregated*.json')
        FILE=$(find tmp -type f -name '*aggregated*.json' | head -n 1)
        if [[ -z "$FILE" ]]; then
          echo "Aggregated report not found"; exit 1
        fi

        mkdir -p site/data
        cp tmp/*.json site/data/
        cp "$FILE"  "site/data/git-hours-${DATE}.json"
        cp "$FILE"  site/git-hours-latest.json

        export FILE DATE
        python - <<'PY'
        import os, json, pathlib, glob, html, textwrap, datetime as dt
        agg = json.load(open(os.environ['FILE']))
        total = agg['total']
        rows = "\n".join(
            f"<tr><td>{html.escape(n)}</td><td>{agg[n]['hours']}</td>"
            f"<td>{agg[n]['commits']}</td></tr>"
            for n in agg if n != 'total')

        sections = []
        for p in glob.glob('tmp/*.json'):
            if 'aggregated' in p:
                continue
            repo_key = pathlib.Path(p).stem.replace('_','/')
            r = json.load(open(p))
            inner = "\n".join(
                f"<tr><td>{html.escape(u)}</td><td>{r[u]['hours']}</td>"
                f"<td>{r[u]['commits']}</td></tr>"
                for u in r if u != 'total')
            sections.append(
                f"<h2>{html.escape(repo_key)}</h2>"
                f"<table class='sortable'><thead><tr><th>Contributor</th>"
                f"<th>Hours</th><th>Commits</th></tr></thead>"
                f"<tbody>{inner}</tbody></table>")

        page = f'''
        <!doctype html><html lang="en"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Collaborator KPIs</title>
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simpledotcss/simple.min.css">
          <script src="https://cdn.jsdelivr.net/npm/sortable-tablesort/sortable.min.js" defer></script>
          <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
          <style>canvas{{max-height:400px}}</style>
        </head><body><main>
          <h1>Collaborator KPIs</h1>
          <p><em>Last updated {dt.datetime.utcnow():%Y-%m-%d %H:%M UTC}</em></p>

          <h2>Totals (all repos)</h2>
          <ul>
            <li><strong>Hours</strong>: {total['hours']}</li>
            <li><strong>Commits</strong>: {total['commits']}</li>
            <li><strong>Contributors</strong>: {len(agg)-1}</li>
          </ul>

          <h2>Hours per contributor</h2><canvas id="hoursChart"></canvas>
          <h2>Commits per contributor</h2><canvas id="commitsChart"></canvas>

          <h2>Detail table (all repos)</h2>
          <table class="sortable"><thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
            <tbody>{rows}</tbody></table>

          {''.join(sections)}

          <p>Historical JSON snapshots live in <code>/data</code>.</p>

          <script>
            fetch('git-hours-latest.json').then(r=>r.json()).then(d=>{
              const labels=Object.keys(d).filter(k=>k!=="total");
              const H=labels.map(l=>d[l].hours);
              const C=labels.map(l=>d[l].commits);
              new Chart(hoursChart,{type:'bar',data:{labels,datasets:[{label:'Hours',data:H}]},
                 options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}});
              new Chart(commitsChart,{type:'bar',data:{labels,datasets:[{label:'Commits',data:C}]},
                 options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}});
            });
          </script>
        </main></body></html>
        '''
        pathlib.Path('site/index.html').write_text(textwrap.dedent(page))
        PY

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: site

# -------------------------------------------------------------------
# 3) Publish to GitHub Pages
# -------------------------------------------------------------------
  deploy-pages:
    needs: build-site
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - id: deployment
      uses: actions/deploy-pages@v4
